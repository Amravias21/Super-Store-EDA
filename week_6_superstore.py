# -*- coding: utf-8 -*-
"""Week_6_SUPERSTORE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ojjIA8EAF4nPsXBYp0YN_VJyeFZsiJGq

# **SUPERSTORE SALES** : Retail dataset of a global superstore for 4 years.

[Document Findings](https://colab.research.google.com/drive/1ojjIA8EAF4nPsXBYp0YN_VJyeFZsiJGq#scrollTo=KyscfiKMTTHp&line=1&uniqifier=1)

#**Import Necessary Libraries**

*   `import pandas as pd`: Imports the Pandas library and assigns it the alias 'pd' for easier referencing in the code.
* `import numpy as np`: Imports the NumPy library and assigns it the alias 'np'.
* `import matplotlib.pyplot as plt`: Imports the Matplotlib library's pyplot module and assigns it the alias 'plt' for creating visualizations.
* `import seaborn as sns`: Imports the Seaborn library and assigns it the alias 'sns' for statistical data visualization.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""#**Load the Dataset**
* `pd.read_csv("/content/drive/MyDrive/Internship Projects/Week-6/train.csv")`: Reads the CSV file named 'train.csv' into a Pandas DataFrame named 'df'.
"""

df = pd.read_csv("/content/drive/MyDrive/Internship Projects/Week-6/train.csv")

"""#**Univariate Analysis**

**Def**: Univariate analysis is a statistical method used to analyze a single variable or attribute at a time. It focuses on describing and understanding the distribution, central tendency, and dispersion of the data within that variable.

1. **Understand Dataset:**

Understanding a dataset involves gaining insight into the structure, content, and quality of the data before applying any analytical techniques or building models

* `df.head()`: This method is used to view the first few rows of a DataFrame. By default, it displays the first five rows, but you can specify the number of rows to display by passing an argument inside the parentheses.
"""

df.head()

"""* `df.shape`: This method returns a tuple representing the dimensions of the DataFrame. The tuple contains two elements:
>*   The first element represents the number of rows in the DataFrame.
>*   The second element represents the number of columns in the DataFrame.



"""

df.shape

"""* `df.sample(n)` : It is a method used to randomly select a specified number of rows (or samples) from a DataFrame.
>* `n`: Specifies the number of rows to be sampled.
"""

df.sample(3)

"""* `df.info()`: It is a method used to obtain concise information about a DataFrame, including:
>* The number of rows (entries) and columns (variables/features) in the DataFrame.
>* The total memory usage of the DataFrame.
>* The count of non-null values in each column indicates the presence of null (missing) values. If a column has fewer non-null values than the total number of entries in the DataFrame, it implies the existence of null values in that column.
>* The types of data stored in each column of the DataFrame.
"""

df.info()

"""* `df.columns`: It is an attribute used to access the column labels of a DataFrame"""

df.columns

df.nunique()

"""**2. Data Cleaning**

It is the process of detecting and correcting errors, inconsistencies, and inaccuracies in a dataset to improve its quality and usability for analysis or modeling. It involves several steps to identify and handle various issues that may exist within the data.

1. `df.columns.str.lower()`:

>* `df.columns` retrieves the column labels of the DataFrame as a pandas Index object.
* `.str.lower()` converts each column label to lowercase. This operation ensures consistency in the case of column names.

2. `.str.replace(' ','_')`:

>* `.str.replace()` is a string method that replaces occurrences of a specified substring with another substring.
* In this case, ' ' (a space) is replaced with '_' (an underscore). This operation replaces spaces in column names with underscores

3. `.str.replace('-', '_')`:

>* Similar to the previous operation, this replaces occurrences of '-' (hyphen) with '_' (underscore).
* This operation is useful for replacing hyphens with underscores, which is often done to maintain consistency and avoid issues with certain programming environments or libraries that don't support hyphens in variable names.

4. `df.columns =` ...:

>* Finally, the modified column labels are assigned back to the DataFrame's column labels. This updates the column names in the DataFrame with the modified versions.
"""

df.columns = df.columns.str.lower().str.replace(' ','_').str.replace('-','_')

df.columns

"""* `df.pop()` is a method used to remove and return a specified column from a DataFrame
* In this case, the "row id" column is redundant and does not provide any additional meaningful information for analysis.
"""

df.pop('row_id')

df.head()

"""* `df.isnull().sum()` returns the number of missing values (null or NaN values) in each column of a DataFrame."""

df.isnull().sum()

"""* Below code is a loop that iterates over each column (x) in a DataFrame (df). For each column, it checks if the data type is object ('O'), which typically indicates that the column contains string data. If the column contains string data, the code performs a series of string manipulation operations on the column values."""

for x in df.columns:
  if df[x].dtypes == 'O':
    df[x] = df[x].str.lower().str.replace('-','_').str.replace(' ','_')

df.head()

"""* `df['sales'] = df['sales'].round(2)` is used to round the values in the 'sales' column of a DataFrame (df) to two decimal places."""

df['sales'] = df['sales'].round(2)

df['sales'].sample()

"""* `df[df['postal_code'].isnull()]` is used to filter rows in a DataFrame (df) where the 'postal_code' column contains missing values (null values or NaN)"""

df[df['postal_code'].isnull()]

"""* By observing the data set we can easily conclude that missing value of postal code is of vermont state burlington city in USA

* `df['postal_code'] = df['postal_code'].fillna("05001")` is used to fill missing values (null values or NaN) in the 'postal_code' column of a DataFrame (df) with a value, "05401".
"""

df['postal_code'] = df['postal_code'].fillna("05401")

df['postal_code'].isnull().sum()

"""* This code is used to verify whether the values of 'postal_code' are replaced correctly or not."""

df[df['state'] == 'vermont']

df['state'].value_counts()

df['ship_mode'].value_counts()

df['segment'].value_counts()

df['country'].value_counts()

df['region'].value_counts()

df['category'].value_counts()

df['sub_category'].value_counts()

df['sales'].value_counts()

"""* Verifying whether there is still any null values in columns."""

df.isnull().sum()

"""**3. Data Types**

Checking the data types of each column and Ensuring they are appropriate for the analysis.

* `dtypes` is an attribute of a DataFrame that provides information about the data types of each column in the DataFrame.
"""

df.dtypes

df['postal_code'].dtypes

"""* `df['postal_code'].astype(int)` is used to convert the values in the 'postal_code' column of a DataFrame (df) to integers."""

df['postal_code'] = df['postal_code'].astype(int)

"""* Verifying the data type of postal code column."""

df['postal_code'].dtypes

"""* Checking the data type of order date code column."""

df['order_date'].dtypes

"""* `pd.to_datetime(df['order_date'], format='%d/%m/%Y')` is used to convert the values in the specified columns of a DataFrame (df) to datetime objects, specifying the format of the date string as '%d/%m/%Y'."""

df['order_date'] = pd.to_datetime(df['order_date'],format='%d/%m/%Y')
df['ship_date'] = pd.to_datetime(df['ship_date'],format='%d/%m/%Y')

"""* Verifying the data type of postal code column."""

df['order_date'].dtypes

df.head()

"""* Checking whether data types of colulmns are matched with thier respective elements of columns."""

df.dtypes

"""**4. Descriptive Statistics:**

Descriptive statistics that deals with summarizing and describing the features or characteristics of a dataset. It provides a way to understand the central tendency, variability, and distribution of the data. Descriptive statistics are used to organize, summarize, and present the key features of a dataset, often through numerical measures.

* `df.describe()` is used to generate descriptive statistics summarizing the central tendency, dispersion, and shape of the numerical columns in a DataFrame (df).
"""

df.describe()

"""Descriptive statistics highlight:

* The "Sales" column ranges from 0.444 to 22638.48, with a mean of 230.77 and a median of 54.49, indicating a right-skewed distribution with high-value outliers.
* The "Postal Code" shows a wide range, from 1040 to 99301, reflecting the nationwide coverage of the data.

**5. Histograms:**

* A histogram is a graphical representation of the distribution of numerical data. It consists of a series of contiguous rectangles, or bars, where the width of each bar represents a range of values, and the height of each bar represents the frequency or count of data points falling within that range. Histograms are particularly useful for visualizing the shape, central tendency, and spread of a dataset.

* Creating a histogram to visualize the distribution of the 'sales' data from a DataFrame (df).
"""

plt.figure(figsize=(10, 6))
sns.histplot(df['sales'], bins=50, kde=True)
plt.title('Sales Distribution')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.yscale('log')
plt.show()

"""* **The histogram shows the distribution of sales, indicating a right-skewed distribution with a few high-value sales.**"""

plt.figure(figsize=(10,6))
plt.hist(df['postal_code'], bins=20, color='green', alpha=0.7)
plt.grid(True)
plt.title('Distribution of Postal Codes')
plt.xlabel('Postal Code')
plt.ylabel('Frequency')
plt.xticks(rotation=90)

"""6. Time Series Plots:"""

sales_year = df.groupby(df['order_date'].dt.to_period('Y'))['sales'].sum()

plt.figure(figsize=(12, 6))
plt.plot(sales_year.index.to_timestamp(), sales_year.values, marker='o', linestyle='-')
plt.title('Sales Past 4 Years')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.grid(True)
plt.tight_layout()
plt.show()

"""* As we can see the sales is increasing gradually from 2016

7. Seasonal Decomposition:
"""

from statsmodels.tsa.seasonal import seasonal_decompose

date = df['order_date']
df.set_index(date, inplace=True)
monthly_sales = df['sales'].resample('M').sum()
result = seasonal_decompose(monthly_sales, model='additive')
plt.figure(figsize=(12, 8))

plt.subplot(411)
plt.plot(result.observed, label='Observed')
plt.grid(True)
plt.legend()

plt.subplot(412)
plt.plot(result.trend, label='Trend', color = 'blue')
plt.grid(True)
plt.legend()

plt.subplot(413)
plt.plot(result.seasonal, label='Seasonal', color = 'green')
plt.grid(True)
plt.legend()

plt.subplot(414)
plt.plot(result.resid, label='Residuals', color = 'red')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

"""**Observed**: This plot shows the actual monthly sales data over time.

**Trend:** This plot highlights the underlying trend in the sales data, smoothing out short-term fluctuations to reveal long-term patterns.

**Seasonal:** This plot illustrates the seasonal component, showing how sales fluctuate in a pattern that repeats over a specific period (e.g., monthly, quarterly).

**Residuals:** This plot displays the residuals, which are the differences between the observed sales and the sum of the estimated trend and seasonal components. It represents the irregular component of the series that cannot be explained by the trend and seasonal factors.

8. Box Plots:
"""

plt.figure(figsize=(8, 6))
plt.boxplot(df['sales'].values)
plt.title('Box Plot of Sales')
plt.xlabel('Sales')
plt.ylabel('Cost')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(y=df['postal_code'], data=df)
plt.title('Box Plot of postal code')
plt.xlabel('postal code')
plt.show()

"""9. Sales Distribution by Category:"""

category_sales = df.groupby('category')['sales'].sum().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
plt.pie(category_sales, labels=category_sales.index, autopct='%1.1f%%', startangle=90, colors=plt.cm.tab20.colors)
plt.title('Sales Distribution by Category')
plt.axis('equal')
plt.show()

"""* With 36.6% of total sales, technology products appear to be the highest-selling category. This suggests that there is a significant demand for technology-related items among customers.
* Office supplies account for 31.2% of total sales. While slightly lower than technology, this category still represents a substantial portion of sales. It indicates that there is a consistent demand for office-related products among consumers or businesses.
* Furniture comprises 32.2% of total sales, making it the second-highest category in terms of sales percentage. This suggests that there is also a notable demand for furniture items, possibly indicating strong consumer interest in home or office furnishings.

10. Sales Variation Over Time:
"""

df['year'] = df['order_date'].dt.year
df['quarter'] = df['order_date'].dt.quarter
df['month'] = df['order_date'].dt.month

yearly_sales = df.groupby('year')['sales'].sum()
quarterly_sales = df.groupby(['year', 'quarter'])['sales'].sum()
monthly_sales = df.groupby(['year', 'month'])['sales'].sum()

plt.figure(figsize=(16, 6))

# Yearly sales
plt.subplot(311)
yearly_sales.plot(marker='o', color='blue')
plt.title('Yearly Sales')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.grid(True)

# Quarterly sales
plt.subplot(312)
quarterly_sales.plot(marker='o', color='green')
plt.title('Quarterly Sales')
plt.xlabel('Quarter')
plt.ylabel('Sales')
plt.grid(True)

# Monthly sales
plt.subplot(313)
monthly_sales.plot(marker='o', color='red')
plt.title('Monthly Sales')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.grid(True)

plt.tight_layout()
plt.show()

"""Shipping Mode"""

df.groupby('ship_mode').size().plot(kind='barh', color=['red','brown','black','green'])
plt.grid(True)

"""* **Standard Class:** This shipping mode was the most preferred among customers. It indicates that customers prioritize cost-effectiveness and are willing to wait longer for delivery in exchange for lower shipping fees.

* **Second Class:** The second most chosen shipping mode after standard class. While it may offer slightly faster delivery compared to standard class, it still suggests that customers are willing to wait a bit longer for their orders to save on shipping costs.

* **First Class:** Customers opted for first class shipping less frequently than standard and second class. This suggests that while some customers prioritize faster delivery, a majority may prioritize cost savings over speed.

* **Same Day:** Same day shipping was the least preferred option among customers. This indicates that while fast delivery is desirable, it is not a priority for most customers, possibly due to the higher associated costs.

## Bivariate Analysis:
**Def:** Bivariate analysis is a statistical method used to explore the relationship between two variables. In other words, it examines how two different variables are related to each other. This analysis helps in understanding the pattern, strength, and direction of the relationship between the variables.

Correlation Analysis:
"""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

"""Scatter Plot

* Sales by postal code
"""

df.plot(kind='scatter', x='postal_code', y='sales',figsize=(12,6), s=32, alpha=.8)
plt.show()

"""* How orders are spread across different postal codes, with some bins showing higher frequencies, suggesting a higher concentration of orders in those postal code areas.

Pair Plot
"""

numeric_variables = ['sales', 'postal_code']
sns.pairplot(df)
plt.suptitle('Pair Plot of Numeric Variables', y=1.02)
plt.show()

"""Category-wise Sales Trends:"""

df['year'] = df['order_date'].dt.year
df['month'] = df['order_date'].dt.month

category_sales = df.groupby(['category', 'year', 'month'])['sales'].sum().reset_index()
col = ['red','blue','green']
i=0
for category in category_sales['category'].unique():
    plt.figure(figsize=(12, 8))
    category_data = category_sales[category_sales['category'] == category]
    plt.subplot(3,1,i+1)
    plt.plot(category_data['year'].astype(str) + '-' + category_data['month'].astype(str),
             category_data['sales'], label=category, color = col[i])
    i=i+1
    plt.title('Sales Trends Across '+ category)
    plt.xlabel('Date')
    plt.ylabel('Sales')
    plt.xticks(rotation=90)
    plt.legend()
    plt.grid(True)
    plt.show()

# Sales by Category
plt.figure(figsize=(10, 6))
sns.boxplot(x='category', y='sales', data=df)
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.show()

"""Sales by Order Date"""

df['sales'].plot(kind='line', figsize=(12, 6), title='sales')
plt.xticks(rotation=90)
plt.show()

"""Sales by Region"""

sale_region = df.groupby('region')['sales'].sum()
plt.figure(figsize=(10,6))
sale_region.plot(kind='barh',color=['blue', 'green', 'orange', 'red'])
plt.title('Sales Across Different Regions')
plt.xlabel('Region')
plt.ylabel('Sales')
plt.show()

"""**West:** This region has the highest sales compared to others. It signifies strong consumer demand or effective marketing strategies in the western area.

**East:** Following the West, the East region has the second-highest sales. This indicates a significant market presence and consumer interest in the eastern region.

**Central:** Sales in the Central region rank third among all regions. This suggests moderate consumer demand or market saturation compared to the West and East regions.

**South:** The South region has the lowest sales compared to other regions. This could be due to various factors such as lower population density, less developed markets, or less effective marketing efforts in that area.
"""

plt.figure(figsize=(15,8))
sale_region = df.groupby(['region','year'])['sales'].sum().unstack()
sale_region.plot(kind='bar',stacked=True)
plt.show()

segment_sales = df.groupby('segment')['sales'].sum()

plt.figure(figsize=(10, 6))
segment_sales.plot(kind='line', marker='o', color='skyblue')
plt.title('Total Sales Across Different Customer Segments')
plt.xlabel('Customer Segment')
plt.ylabel('Total Sales')
plt.grid(True)

for i, sales in enumerate(segment_sales):
    plt.text(i, sales, f'{sales:.0f}', ha='center', va='bottom')

plt.show()

product_quantity = df['product_name'].value_counts()
sales_quantity_df = pd.DataFrame({'sales': df.groupby('product_name')['sales'].sum(),'quantity': product_quantity})

plt.figure(figsize=(10, 6))
plt.scatter(sales_quantity_df['quantity'], sales_quantity_df['sales'], alpha=0.5, color='blue')
plt.title('Scatter Plot of Sales vs Quantity Sold')
plt.xlabel('Quantity Sold')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

ship = df.groupby('ship_mode')['sales'].sum()
ship

ship = df.groupby('ship_mode')['sales'].sum()
plt.figure(figsize=(8, 6))
ship.plot(kind='bar' ,color=['blue', 'green', 'orange', 'red'])
ship.plot(kind='line', color='black', marker='*')
plt.title('Sales by Shipping Mode')
plt.xlabel('Shipping Mode')
plt.xticks(rotation=0)
plt.ylabel('Sales')
for i, sales in enumerate(ship):
    plt.text(i, sales, f'{sales:.0f}', ha='right', va='bottom')
plt.show()

"""* **Standard Class:** This shipping mode was the most preferred among customers. It indicates that customers prioritize cost-effectiveness and are willing to wait longer for delivery in exchange for lower shipping fees.

* **Second Class:** The second most chosen shipping mode after standard class. While it may offer slightly faster delivery compared to standard class, it still suggests that customers are willing to wait a bit longer for their orders to save on shipping costs.

* **First Class:** Customers opted for first class shipping less frequently than standard and second class. This suggests that while some customers prioritize faster delivery, a majority may prioritize cost savings over speed.

* **Same Day:** Same day shipping was the least preferred option among customers. This indicates that while fast delivery is desirable, it is not a priority for most customers, possibly due to the higher associated costs.
"""

ship = df.groupby('ship_mode')['sales'].sum()

plt.figure(figsize=(12, 6))
sns.catplot(x='ship_mode', y='sales', data=df,hue='sub_category' ,palette='Set1',kind="strip")
plt.title('Relationship Between Shipping Modes and Sales')
plt.xlabel('Shipping Mode')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

"""Shipping modes impact the delivery times"""

df['delivery_time'] = (df['ship_date'] - df['order_date']).dt.days

# Group by Ship Mode and calculate average delivery time
avg_delivery_time_by_ship_mode = df.groupby('ship_mode')['delivery_time'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
sns.barplot(x='ship_mode', y='delivery_time', data=avg_delivery_time_by_ship_mode, palette='Set1')
plt.title('Average Delivery Time by Shipping Mode')
plt.xlabel('Shipping Mode')
plt.ylabel('Average Delivery Time (days)')
plt.show()

"""Product wise sales"""

productwise = df.groupby('product_name')['sales'].sum()
productwise

productwise = df.groupby('product_name')['sales'].sum()
plt.figure(figsize=(14,6))
productwise.plot(kind='line' ,color='blue')
plt.title('Product wise sales')
plt.xlabel('Products')
plt.xticks(rotation=90)
plt.ylabel('Sales')
plt.show()

region_product_sales = pd.pivot_table(df, values='sales', index='sub_category', columns='region', aggfunc=np.sum, fill_value=0)
fig, ax = plt.subplots(figsize=(12, 6))

region_product_sales.plot(kind='bar', ax=ax, stacked=False, colormap='viridis')
plt.title('Product Sales Across Different Regions')

plt.ylabel('Sales')
plt.legend(title='Region')
plt.grid(axis='y')

plt.show()

region = df.groupby('region').size()
plt.pie(region, labels=region.index, autopct='%1.1f%%', startangle=90)
plt.title('Orders from Regions')
plt.grid(True)
plt.show()

"""#Document Findings

## From Univariate Analysis:
a) Key insights from the unique values:

* The dataset contains 4922 unique orders placed on 1230 unique order dates.
* There are 4 shipping modes, 793 unique customers, and 3 segments.
* The dataset covers 529 cities across 49 states in the United States.
* There are 1861 unique products across 3 categories and 17 sub-categories

b) Descriptive statistics highlight:

* The "Sales" column ranges from 0.444 to 22638.48, with a mean of 230.77 and a median of 54.49, indicating a right-skewed distribution with high-value outliers.
* The "Postal Code" shows a wide range, from 1040 to 99301, reflecting the nationwide coverage of the data.

c) Sales Distribution:
* The histogram shows the distribution of sales, indicating a right-skewed distribution with a few high-value sales. There are a few high-value sales that significantly impact the overall distribution

d) Postal code Distribution:
* The distribution indicates how orders are spread across different postal codes, with some bins showing higher frequencies, suggesting a higher concentration of orders in those postal code areas.

e) From Time Series Plots we can observe that the sales are gradually increasing **Jan of 2016**.

f) From seasonal Decompositon we can conclude that monthly sales are fluctuating and for every year ending the sale is high after start every new year the sale is droping. And from 2018 the sale is gradually increasing compared to previous quarters.

g) Mostly the cost of items ranges from 1 to 5000 and above 10,000 if less.So the customers prefers only products whose price ranges from 1 to 5000.

h) The box plot of postal code shows that the sales are covered evenly across the country.

i) With 36.6% of total sales, **technology** products appear to be the highest-selling category. This suggests that there is a significant demand for technology-related items among customers.
* Office supplies account for 31.2% of total sales. While slightly lower than technology, this category still represents a substantial portion of sales. It indicates that there is a consistent demand for office-related products among consumers or businesses.
* Furniture comprises 32.2% of total sales, making it the second-highest category in terms of sales percentage. This suggests that there is also a notable demand for furniture items, possibly indicating strong consumer interest in home or office furnishings.

j) The majority of customers prioritize a balance between cost and delivery time, as standard class shipping is typically more economical but may take a longer time, while same-day shipping is faster but often more expensive. Understanding these preferences can help optimize shipping strategies and meet customer expectations.

## **From Bivariate Analysis:**
1.	**SHIPPING MODE:** The sales data indicates that the majority of orders are fulfilled using the standard shipping mode, suggesting that customers prioritize cost-effectiveness and are willing to wait longer for delivery. Following closely behind is the second class shipping option, indicating a significant portion of customers are willing to trade off speed for savings. First-class shipping ranks third in popularity, possibly indicating a segment of customers willing to pay a premium for quicker delivery. Lastly, same-day shipping represents the smallest proportion of sales, suggesting that while there is demand for immediate delivery, it is not as prevalent compared to other shipping options. Overall, the data highlights a hierarchy in customer preferences for shipping modes, with cost-effectiveness and convenience playing crucial roles in decision-making.
2.	**SEGMENT:** The majority of customers belong to the consumer segment, followed by corporate customers, with home office customers being the least represented.
3.	**REGION:** West region has the highest sales compared to others. It signifies strong consumer demand or effective marketing strategies in the western area, the East region has the second-highest sales. This indicates a significant market presence and consumer interest in the eastern region. Sales in the Central region rank third among all regions. This suggests moderate consumer demand or market saturation compared to the West and East regions. The South region has the lowest sales compared to other regions. This could be due to various factors such as lower population density, less developed markets, or less effective marketing efforts in that area.
4.	**QUANTITY:** The quantity sold is more between 1-10 and average sales between quantities 10-20 and very few sales of quantities more than 20.
5. **SUB-CATEGORY:** The mostly sold products under chairs and phones category in all four regions.
"""